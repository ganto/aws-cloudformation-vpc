AWSTemplateFormatVersion: 2010-09-09
Description: Template for a Fedora 33 bastion EC2 instance into an existing VPC
Parameters:
  EC2AMI:
    Default: ami-0aa3a65f84cb982ca
    Description: The AMI ID to be used for the bastion instances.
    Type: AWS::EC2::Image::Id
  EC2InstanceType:
    Default: t2.micro
    Description: Amazon EC2 instance type for the bastion instances.
    Type: String
  EC2RootVolumeSize:
    Description: The size in GB for the root EBS volume.
    Type: Number
    Default: '6'
  EC2UserData:
    Description: UserData payload that is executed during instance provisioning.
    Type: String
    Default: ''
  KeyPairName:
    Description: Name of an existing public/private key pair. If you do not have one
      in this AWS Region, please create it before continuing.
    Type: AWS::EC2::KeyPair::KeyName
  PublicSubnetID:
    Description: ID of the public subnet that you want to provision the bastion into
      (e.g., subnet-a0246dcd).
    Type: AWS::EC2::Subnet::Id
  RemoteAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Default: '0.0.0.0/0'
    Description: Allowed CIDR block for external SSH access to the bastions.
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e).
    Type: AWS::EC2::VPC::Id
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must exist in the VPC.
Resources:
  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref 'EC2RootVolumeSize'
            VolumeType: gp2
      ImageId: !Ref 'EC2AMI'
      InstanceType: !Ref 'EC2InstanceType'
      KeyName: !Ref 'KeyPairName'
      SubnetId: !Ref 'PublicSubnetID'
      SecurityGroupIds:
        - !Ref 'BastionSecurityGroup'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: Type
          Value: BastionInstance
      UserData: !Ref 'EC2UserData'
  BastionPublicIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref 'BastionInstance'
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Security group for ${AWS::StackName} bastion host'
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - CidrIp: !Ref 'RemoteAccessCIDR'
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: !Ref 'RemoteAccessCIDR'
          FromPort: -1
          IpProtocol: icmp
          ToPort: -1
Outputs:
  BastionPublicIP:
    Description: Bastion public IP address.
    Value: !Sub '${BastionInstance.PublicIp}'
    Export:
      Name: !Sub '${AWS::StackName}-BastionPublicIp'
  BastionSecurityGroupID:
    Description: Bastion security group ID.
    Value: !Ref 'BastionSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-BastionSecurityGroupID'
